everything_off:
  alias: Turn everything off in the house
  mode: single
  fields:
    exclude_entity_ids:
      description: entity_ids to exclude
  variables:
    exclude_ids: >
      {{ exclude_entity_ids | default([]) }}
    fans: >
      {{
        states.fan
        | selectattr('state', 'eq', 'on')
        | rejectattr('entity_id', 'in', ['fan.air_purifier', 'fan.mechanische_ventilatie_ventilatie'])
        | rejectattr('entity_id', 'in', exclude_ids)
        | map(attribute='entity_id')
        | join(', ')
      }}
    media_players: >
      {{
        states.media_player
        | rejectattr('state', 'in', ['off', 'unavailable'])
        | rejectattr('entity_id', 'match', 'media_player.plex')
        | rejectattr('entity_id', 'in', ['media_player.mediabox_homekit'])
        | rejectattr('entity_id', 'in', exclude_ids)
        | map(attribute='entity_id')
        | join(', ')
      }}
    lights: >
      {{
        states.light
        | selectattr('state', 'eq', 'on')
        | rejectattr('attributes.is_hue_group', 'defined')
        | rejectattr('attributes.entity_id', 'defined')
        | rejectattr('entity_id', 'in', exclude_ids)
        | map(attribute='entity_id')
        | join(', ')
      }}
  sequence:
    - if:
        - "{{ fans != '' }}"
      then:
        - alias: Turn off all fans
          service: fan.turn_off
          target:
            entity_id: "{{ fans }}"
    - if:
        - "{{ media_players != '' }}"
      then:
        - alias: Turn off all media players
          service: media_player.turn_off
          target:
            entity_id: "{{ media_players }}"
    - if:
        - "{{ lights != '' }}"
      then:
        - alias: Turn off all lights
          service: light.turn_off
          target:
            entity_id: "{{ lights }}"

close_cover_window_state:
  alias: Close cover, depending on window state
  mode: parallel
  fields:
    cover_entity:
      name: Cover entity
      description: Cover entity
      selector:
        entity:
          domain: cover
    window_entity:
      name: Door/window entity
      description: This should be closed (off) to make the cover close.
      selector:
        entity:
          domain: binary_sensor
    wait_minutes:
      name: Wait period
      description: In case the window entity is open (true) at the moment of trigger, the cover will still be closed when the window is closed within this wait period.
      default: 120
      selector:
        number:
          min: 0
          max: 600
          unit_of_measurement: minutes
  sequence:
    - choose:
        - conditions:
            - "{{ is_state(window_entity, 'off') }}"
            - "{{ is_state(cover_entity, 'open') }}"
          sequence:
            - alias: Close the cover
              service: cover.close_cover
              target:
                entity_id: "{{ cover_entity }}"

        - conditions:
            - "{{ is_state(window_entity, 'on') }}"
            - "{{ is_state(cover_entity, 'open') }}"
          sequence:
            - alias: Wait if the window is closed within a given time.
              wait_template: "{{ is_state(window_entity, 'off') }}"
              timeout:
                minutes: "{{ wait_minutes }}"
              continue_on_timeout: false

            - alias: Wait a little to make sure it's really closed
              delay:
                seconds: 5

            - alias: Close the cover now
              service: cover.close_cover
              target:
                entity_id: "{{ cover_entity }}"
