google_theme:
  styles:
    card:
      - height: 100%
    icon:
      - color: var(--paper-item-icon-color)
    state:
      - font-size: 0.9rem
      - color: var(--secondary-text-color)
    label:
      - font-size: 0.9rem
      - color: var(--secondary-text-color)
      - margin-bottom: 20px

afvalbeheer:
  template: google_theme
  show_entity_picture: true
  show_label: true
  label: >-
    [[[
      if (entity.state.includes(",")) {
        return entity.state.split(",")[0];
      } else {
        return entity.state;
      }
    ]]]
  styles:
    label:
      - margin-bottom: 0px
  
air_purifier:
  template: google_theme
  hold_action:
    action: more-info
  show_state: true
  show_label: true
  label: >-
    [[[
      return "Kwaliteit: " + states["sensor.air_purifier_air_quality"].state;
    ]]]
  
plant:
  template: google_theme
  hold_action:
    action: more-info
  show_state: false
  show_label: true
  name: >-
    [[[ return entity.attributes.friendly_name.replace(" ", "<br>"); ]]]
  label: >-
    [[[
      var label = entity.state;
      if (entity.state == 'problem') {
        var problem = entity.attributes.problem
          .replace("moisture high", "te vochtig")
          .replace("moisture low", "te droog")
          .replace("conductivity high", "hoge geleidbaarheid")
          .replace("conductivity low", "lage geleidbaarheid")
          .replace("temperature high", "te warm")
          .replace("temperature low", "te koud")
          .replace("brightness high", "te licht")
          .replace("brightness low", "te donker");
        var sensor_value = entity.attributes[entity.attributes.problem.split(" ")[0]];
        var sensor_unit = entity.attributes.unit_of_measurement_dict[entity.attributes.problem.split(" ")[0]];
        label = `${problem} (${sensor_value}${sensor_unit})`;
      }
      return label;
    ]]]
  styles:
    label:
      - text-transform: capitalize
      - margin-bottom: 4px

zonnescherm:
  entity: cover.zonnescherm
  template: google_theme
  show_state: false
  show_label: true
  label: >-
    [[[
      if (states["binary_sensor.zonnescherm_contact_contact"].state == "on") {
        return "Open";
      } else {
        return "Gesloten";;
      }
    ]]]
  styles:
    icon:
      - color: >-
          [[[
            if (states["binary_sensor.zonnescherm_contact_contact"].state == "on") {
              return "var(--paper-item-icon-active-color)";
            } else {
              return "var(--paper-item-icon-color)";
            }
          ]]]
