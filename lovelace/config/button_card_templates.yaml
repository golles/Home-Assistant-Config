google_theme:
  styles:
    card:
      - height: 100%
    icon:
      - color: >-
          [[[ return entity.state == "on" ? "var(--paper-item-icon-active-color)" : "var(--paper-item-icon-color)"; ]]]
    state:
      - font-size: 0.9rem
      - color: var(--secondary-text-color)
    label:
      - font-size: 0.9rem
      - color: var(--secondary-text-color)
      - margin-bottom: 20px

afvalbeheer:
  template: google_theme
  show_entity_picture: true
  show_label: true
  label: >-
    [[[
      if (entity.state.includes(",")) {
        return entity.state.split(",")[0];
      } else {
        return entity.state;
      }
    ]]]
  styles:
    label:
      - margin-bottom: 0px
  
air_purifier:
  template: google_theme
  hold_action:
    action: more-info
  show_state: true
  show_label: true
  label: >-
    [[[ return "Kwaliteit: " + states["sensor.luchtkwaliteit"].state; ]]]

mechanische_ventilatie:
  template: google_theme
  entity: fan.mechanische_ventilatie
  name: Ventilatie
  styles:
    card:
      - height: 100%
    icon:
      - color: >-
          [[[ return entity.attributes.speed != "low" ? "var(--paper-item-icon-active-color)" : "var(--paper-item-icon-color)"; ]]]
  tap_action:
    action: call-service
    service: script.ventilation_set_speed_timer
    service_data:
      speed: high
      timer: 10
  hold_action:
    action: more-info
  show_state: false
  show_label: true
  label: >-
    [[[
      var speed = entity.attributes.speed;
      if (speed == 'low') {
        return 'Laag';
      } else if (speed == 'medium') {
        return 'Medium';
      } else if (speed == 'high') {
        return 'Hoog';
      } else if (speed == 'max') {
        return 'Maximaal';
      } else {
        return speed;
      }
    ]]]
  
plant:
  template: google_theme
  hold_action:
    action: more-info
  show_state: false
  show_label: true
  name: >-
    [[[ return entity.attributes.friendly_name.replace(" ", "<br>"); ]]]
  label: >-
    [[[
      var label = entity.state;
      if (entity.state == 'problem') {
        var problem = entity.attributes.problem
          .replace("moisture high", "te vochtig")
          .replace("moisture low", "te droog")
          .replace("conductivity high", "hoge geleidbaarheid")
          .replace("conductivity low", "lage geleidbaarheid")
          .replace("temperature high", "te warm")
          .replace("temperature low", "te koud")
          .replace("brightness high", "te licht")
          .replace("brightness low", "te donker");
        var sensor_value = entity.attributes[entity.attributes.problem.split(" ")[0]];
        var sensor_unit = entity.attributes.unit_of_measurement_dict[entity.attributes.problem.split(" ")[0]];
        label = `${problem} (${sensor_value}${sensor_unit})`;
      }
      return label;
    ]]]
  styles:
    label:
      - text-transform: capitalize
      - margin-bottom: 4px

zonnescherm:
  entity: cover.zonnescherm
  template: google_theme
  show_state: false
  show_label: true
  label: >-
    [[[
      if (states["binary_sensor.zonnescherm_contact_contact"].state == "on") {
        return "Open";
      } else {
        return "Gesloten";;
      }
    ]]]

kamer_info:
  aspect_ratio: 1/1
  show_state: false
  triggers_update: all
  variables:
    climate_entity: 
    light_entity: 
    temperature_entity:
    humidity_entity:
    view:
  tap_action:
    action: navigate
    navigation_path: "[[[ return variables.view ]]]"
  hold_action:
    action: call-service
    service: light.toggle
    service_data:
      entity_id: "[[[ return variables.light_entity ]]]"
  styles:
    grid:
      - grid-template-areas: '"heating lights" "i i" "n n" "stats stats"'
      - grid-template-columns: 1fr 1fr
      - grid-template-rows: min-content 1fr min-content min-content
    name:
      - color: var(--text-color)
      - justify-self: start
      - padding-left: 10px
      - font-size: 1.2rem
    icon:
      - color: var(--paper-item-icon-color)
    custom_fields:
      lights:
        - align-self: start
        - justify-self: end
        - padding-right: 10px
        - color: >-
            [[[ return states[variables.light_entity].state == "on" ? "#f7cd89" : "var(--secondary-text-color)"; ]]]
        - opacity: >-
            [[[ return states[variables.light_entity].state == "on" ? 1 : 0.6; ]]]
      heating:
        - align-self: start
        - justify-self: start
        - padding-left: 10px
        - color: >-
            [[[ return states[variables.climate_entity].state == "heat" ? "#ff8100" : "var(--secondary-text-color)"; ]]]
        - opacity: >-
            [[[ return states[variables.climate_entity].state == "heat" ? 1 : 0.6; ]]]
      stats:
        - color: var(--secondary-text-color)
        - font-size: 0.9rem
        - padding-left: 8px
        - align-self: start
        - justify-self: start
  custom_fields:
    heating: |
      [[[
        if (states[variables.climate_entity] != undefined) {
          return '<ha-icon icon="mdi:fire" style="width: 26px; height: 26px;"></ha-icon>'
        }
      ]]]
    lights: |
      [[[ 
        if (states[variables.light_entity] != undefined) {
          return '<ha-icon icon="mdi:lightbulb" style="width: 26px; height: 26px;"></ha-icon>'
        }
      ]]]
    stats: |
      [[[
        let stats = [];
        let temperature;
        let humidity;

        if (states[variables.climate_entity] != undefined) {
          temperature = states[variables.climate_entity].attributes.current_temperature;
          humidity = states[variables.climate_entity].attributes.current_humidity;
        } else {
          if (states[variables.temperature_entity] != undefined) {
            temperature = Math.round(states[variables.temperature_entity].state);
          }
          if (states[variables.humidity_entity] != undefined) {
            humidity = Math.round(states[variables.humidity_entity].state);
          }
        }
        if (temperature) {
          stats.push(`<ha-icon icon="mdi:thermometer" style="width: 12px; height: 12px;"></ha-icon><span>${temperature}Â°C</span>`);
        }
        if (humidity) {
          stats.push(`<ha-icon icon="hass:water" style="width: 12px; height: 12px;"></ha-icon><span>${humidity}%</span>`);
        }
        
        return stats.join(' ');
      ]]]
