- id: track_golf_75
  alias: Golf 7.5 - Update locatie
  description: |
    This automation does update a car location.
    Requirements:
      - An iPhone
      - Focus while driving should be set, either automatically or via Bluetooth.
      - Shortcuts app should be installed and 2 automations should be created:
        1. When focus Driving is turned on -> select Home Assistant event: GOLF_75_START
        2. When focus Driving is turned off -> select Home Assistant event: GOLF_75_STOP
    Every {throttle_seconds} the location of the person who sent the start event is used as the car location. This is done until the stop event is sent.
    This does only work if a defined Home Assistant person is driving the car, so no theft protection.
  mode: restart
  triggers:
    - trigger: event
      event_type: GOLF_75_START
      id: start
    - trigger: event
      event_type: GOLF_75_STOP
      id: stop
    - trigger: homeassistant
      event: start
      id: restore
  variables:
    device_tracker_id: golf_7_5
    throttle_seconds: 30
  actions:
    - alias: Collect some variables
      variables:
        user_id: >-
          {% if trigger.event.context is defined %}
              {{ trigger.event.context.user_id }}
          {% else %}
              null
          {% endif %}
        person: >-
          {{
            states.person
              | selectattr("attributes.user_id", "eq", user_id)
              | map(attribute="entity_id")
              | first
              | default("none")
          }}

    - choose:
        - alias: Start event, person should be set as well
          conditions:
            - '{{ person != "none" }}'
            - condition: trigger
              id: start
          sequence:
            - alias: Repeat location updates until the automation is triggered with a stop event
              repeat:
                while: "{{ True }}"
                sequence:
                  - alias: Set car location based on the location of the person
                    action: device_tracker.see
                    data:
                      dev_id: "{{ device_tracker_id }}"
                      gps:
                        - '{{ state_attr(person, "latitude")}}'
                        - '{{ state_attr(person, "longitude")}}'
                      gps_accuracy: >-
                        {{ state_attr(person, "gps_accuracy") }}

                  - alias: Throttle updates
                    delay:
                      seconds: "{{ throttle_seconds }}"

        - alias: Stop event, person should be set as well
          conditions:
            - '{{ person != "none" }}'
            - condition: trigger
              id: stop
          sequence:
            - alias: Set final car location based on the location of the person
              action: device_tracker.see
              data:
                dev_id: "{{ device_tracker_id }}"
                gps:
                  - '{{ state_attr(person, "latitude")}}'
                  - '{{ state_attr(person, "longitude")}}'
                gps_accuracy: >-
                  {{ state_attr(person, "gps_accuracy") }}

        - alias: Restore event
          conditions:
            - condition: trigger
              id: restore
          sequence:
            - alias: Set car location based on last known location from SQL sensor
              action: device_tracker.see
              data:
                dev_id: "{{ device_tracker_id }}"
                gps:
                  - '{{ states("sensor.golf_7_5_last_known_location").split(", ")[0] }}'
                  - '{{ states("sensor.golf_7_5_last_known_location").split(", ")[1] }}'
                gps_accuracy: >-
                  {{ states("sensor.golf_7_5_last_known_location").split(", ")[2] }}

# sensor.golf_7_5_last_known_location is a SQL sensor with the following query:
#
# SELECT
#    CONCAT(
#       JSON_VALUE(state_attributes.shared_attrs, '$.latitude'),
#       ', ',
#       JSON_VALUE(state_attributes.shared_attrs, '$.longitude'),
#       ', ',
#       JSON_VALUE(state_attributes.shared_attrs, '$.gps_accuracy')
#    ) as location
# FROM
#    states
#    LEFT JOIN
#       state_attributes
#       ON ( states.attributes_id = state_attributes.attributes_id )
# WHERE
#    metadata_id =
#    (
#       SELECT
#          metadata_id
#       FROM
#          states_meta
#       WHERE
#          entity_id = 'device_tracker.golf_7_5'
#    )
#    AND JSON_VALUE(state_attributes.shared_attrs, '$.latitude') IS NOT NULL
#    AND JSON_VALUE(state_attributes.shared_attrs, '$.longitude') IS NOT NULL
#    AND JSON_VALUE(state_attributes.shared_attrs, '$.gps_accuracy') IS NOT NULL
# ORDER BY
#    state_id DESC LIMIT 1;
