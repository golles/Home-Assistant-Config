blueprint:
  name: Awtrix clock
  description: |
    ### Overview

    This blueprint offers comprehensive control for Awtrix clocks, boasting the following functionalities:

      - Automatically toggle the display based on room occupancy.
      - Convenient manual display control via a button.
      - Display informative apps, including:
        - Real-time room temperature.
        - External temperature with weather-dependent icons.

    ### Weather Icons
    Get a variety of weather icons on your clock by running my [awtrix](https://github.com/golles/Home-Assistant-Config/blob/main/scripts/awtrix) script.

    ### Extra scripts
    A variety of extra scripts can be found in my [awtrix](https://github.com/golles/Home-Assistant-Config/blob/main/packages/awtrix.yaml) package.
  domain: automation
  author: golles
  source_url: https://raw.githubusercontent.com/golles/Home-Assistant-Config/main/blueprints/automation/golles/awtrix_clock.yaml
  input:
    topic:
      selector:
        text: null
      name: Topic
      description: The device mqtt topic
      default: awtrix_XXXXXX
    light_entity:
      selector:
        entity:
          domain: light
          integration: mqtt
      name: Display entity
      description: The device display entity
      default: light.awtrix_matrix
    button_entity:
      selector:
        entity:
          domain: binary_sensor
          integration: mqtt
      name: Middle button
      description: The device middle button, to toggle the screen
      default: binary_sensor.awtrix_button_select
    temp_entity:
      selector:
        entity:
          domain: sensor
          device_class: temperature
      name: Temperature entity
      description: Used for inside temperature
      default: sensor.room_temperature
    weather_entity:
      selector:
        entity:
          domain: weather
      name: Weather entity
      description: Used for outisde temperature
      default: weather.home
    dishwasher_entity:
      selector:
        entity:
          domain: sensor
      name: Dishwasher remaining time entity
      description: Used for dishwasher remaining time
      default: sensor.dishwasher_remaining_time
    washing_machine_entity:
      selector:
        entity:
          domain: sensor
      name: Washing machine remaining time entity
      description: Used for washing machine remaining time
      default: sensor.washing_machine_remaining_time
    occupancy_entity:
      selector:
        entity:
          domain: binary_sensor
          device_class: occupancy
      name: Room occupancy sensor
      description: Turn display automatically on or off depending on occupancy
      default: binary_sensor.room_occupancy

mode: parallel
max_exceeded: silent

triggers:
  - trigger: state
    id: button_click
    entity_id: !input button_entity
    to: "on"
  - trigger: state
    id: occupancy_on
    entity_id: !input occupancy_entity
    to: "on"
  - trigger: state
    id: occupancy_off
    entity_id: !input occupancy_entity
    to: "off"
    for:
      minutes: 10
  - trigger: state
    id: apps
    entity_id:
      - !input temp_entity
      - !input weather_entity
      - !input dishwasher_entity
      - !input washing_machine_entity

actions:
  - variables:
      topic: !input topic
      button_entity: !input button_entity
      light_entity: !input light_entity
      temp_entity: !input temp_entity
      dishwasher_entity: !input dishwasher_entity
      washing_machine_entity: !input washing_machine_entity
      weather_entity: !input weather_entity

  - choose:
      - conditions: "{{ trigger.id == 'button_click' }}"
        sequence:
          - alias: Toggle display
            action: light.toggle
            target:
              entity_id: "{{ light_entity }}"

      - conditions: "{{ trigger.id == 'occupancy_on' }}"
        sequence:
          - alias: Turn display on
            action: light.turn_on
            target:
              entity_id: "{{ light_entity }}"

      - conditions: "{{ trigger.id == 'occupancy_off' }}"
        sequence:
          - alias: Turn display off
            action: light.turn_off
            target:
              entity_id: "{{ light_entity }}"

      - conditions: "{{ trigger.id == 'apps' }}"
        sequence:
          - alias: Update inside temp
            action: mqtt.publish
            data:
              topic: "{{ topic }}/custom/temp-inside"
              payload: >-
                {% if states(temp_entity) not in [None, "unknown"] %}
                  {{
                    dict(
                      text = states(temp_entity) | round ~ state_attr(temp_entity, "unit_of_measurement"),
                      icon = "temp-inside",
                    ) }}
                {% endif %}

          - alias: Update weather
            action: mqtt.publish
            data:
              topic: "{{ topic }}/custom/weather"
              payload: >-
                {% if state_attr(weather_entity, "temperature") not in [None, "unknown"] %}
                  {{
                    dict(
                      text = state_attr(weather_entity, "temperature") | round ~ state_attr(weather_entity, "temperature_unit"),
                      icon = states(weather_entity),
                    )
                  }}
                {% endif %}

          - alias: Update dishwasher
            action: mqtt.publish
            data:
              topic: "{{ topic }}/custom/dishwasher"
              payload: >-
                {% if states(dishwasher_entity) not in ["unknown", "unavailable"] %}
                  {{
                    dict(
                      text = states(dishwasher_entity) | replace("minuten", ""),
                      icon = "dishwasher",
                    )
                  }}
                {% endif %}

          - alias: Update washing machine
            action: mqtt.publish
            data:
              topic: "{{ topic }}/custom/washing_machine"
              payload: >-
                {% if states(washing_machine_entity) not in ["unknown", "unavailable"] %}
                  {{
                    dict(
                      text = states(washing_machine_entity) | replace("minuten", ""),
                      icon = "washing_machine",
                    )
                  }}
                {% endif %}
